const express = require("express");
const bcrypt = require("bcryptjs");
const cookieSession = require('cookie-session');
const app = express();
const PORT = 8080; // default port 8080

function generateRandomString() {
  let result = Math.random().toString(36).substring(2, 8);
  return result;
}

app.set("view engine", "ejs");
app.use(express.urlencoded({ extended: true })); // populates req.body - express's "body parser"
app.use(cookieSession({
  name: 'session',
  keys: ["randomString"],

  // Cookie Options
  maxAge: 24 * 60 * 60 * 1000 // 24 hours
}))

const urlDatabase = {};
const users = {};

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});

const urlsForUser = function(u_id) {
  const urls = {};
  for (const id in urlDatabase) {
    if (urlDatabase[id].user_id === u_id) {
      urls[id] = urlDatabase[id];
    }
  }
  console.log(urls);
  return urls;
}


app.get("/urls", (req, res) => {
  // Return HTML error if user is not logged in
  const u_id = req.session.user_id;
  if (!u_id) {
    return res.status(400).send("Must be logged in to view shortened URLs.");
  }

  const templateVars = {
    urls: urlsForUser(u_id),
    user: users[req.session.user_id]
  };
  res.render("urls_index", templateVars);
});

app.get("/urls/new", (req, res) => {
  // If user not logged in, redirect to login page
  const u_id = req.session.user_id;
  if (!u_id) {
    res.redirect("/login");
  }
  // If user logged in, render urls_new template
  const templateVars = {
    user: users[req.session.user_id]
  };
  res.render("urls_new", templateVars);
});

app.get("/urls/:id", (req, res) => {
  // Return HTML error if user is not logged in
  const u_id = req.session.user_id;
  if (!u_id) {
    return res.status(400).send("Must be logged in to view/edit shortened URLs.");
  }
  // Return HTML error if id does not exist
  if (!urlDatabase[req.params.id]) {
    return res.status(400).send("This short URL does not exist.");
  }
  // Return HTML error if user does not own the URL
  if (u_id !== urlDatabase[req.params.id].user_id) {
    return res.status(400).send("This URL is not associated with your account.");
  }

  const templateVars = {
    id: req.params.id,
    longURL: urlDatabase[req.params.id].longURL,
    user: users[req.session.user_id]
  };
  res.render("urls_show", templateVars);
});

app.post("/urls", (req, res) => {
  // If user not logged in, respond with error
  const u_id = req.session.user_id;
  if (!u_id) {
    return res.status(400).send("Must be logged in to shorten URLs.");
  }
  // If user logged in, allow interaction with server
  const shortURL = generateRandomString();
  console.log(req.body); // Log the POST request body to the console
  console.log(shortURL); // log the shortURL (generated by random string) to the console
  const longURL = req.body.longURL; // key-value pair is being saved to the urlDatabase
  urlDatabase[shortURL] = {
    longURL: longURL,
    user_id: u_id
  };
  res.redirect(`/urls/${shortURL}`); // redirect to /urls/:id
});

app.get("/u/:id", (req, res) => {
  let id = req.params.id;

  if (!urlDatabase[id]) {
    return res.status(400).send("This shortened URL does not exist.");
  }

  const longURL = urlDatabase[id].longURL;
  res.redirect(longURL);
});

app.post("/urls/:id/delete", (req, res) => {
  let id = req.params.id;
  
  // Return HTML error if id does not exist
  if (!urlDatabase[req.params.id]) {
    return res.status(400).send("This short URL does not exist.");
  }
  // Return HTML error if user is not logged in
  const u_id = req.session.user_id;
  if (!u_id) {
    return res.status(400).send("Must be logged in to delete shortened URLs.");
  }
  // Return HTML error if user does not own the URL
  if (u_id !== urlDatabase[req.params.id].user_id) {
    return res.status(400).send("This URL is not associated with your account.");
  }

  delete urlDatabase[id];
  res.redirect("/urls");
});

app.post("/urls/:id", (req, res) => {
  
  // Return HTML error if id does not exist
  if (!urlDatabase[req.params.id]) {
    return res.status(400).send("This short URL does not exist.");
  }
  // Return HTML error if user is not logged in
  const u_id = req.session.user_id;
  if (!u_id) {
    return res.status(400).send("Must be logged in to view/edit shortened URLs.");
  }
  // Return HTML error if user does not own the URL
  if (u_id !== urlDatabase[req.params.id].user_id) {
    return res.status(400).send("This URL is not associated with your account.");
  }

  let id = req.params.id;
  const longURL = req.body.longURL;
  urlDatabase[id] = {
    longURL: longURL,
    user_id: u_id
  };
  res.redirect("/urls");
});

app.get("/login", (req, res) => {
  // Check for existing cookie (user logged in?)
  const u_id = req.session.user_id;
  if (u_id) {
    res.redirect("/urls");
  }
  // Render login page if user not logged in
  const templateVars = {
    user: users[req.session.user_id]
  };
  res.render("login", templateVars);
});

app.post("/login", (req, res) => {
  const email = req.body.email;
  const password = req.body.password;
  // Is email already registered?
  let foundUser = null;
  for (const u_id in users) {
    const user = users[u_id];
    if (user.email === email) {
      foundUser = user;
    }
  }
  // If email is not registered:
  if (!foundUser) {
    return res.status(403).send("Email is not registered.");
  }
  // If password does not match:
  if ((bcrypt.compareSync(password, foundUser.password)) === false) {
    return res.status(403).send("Password is incorrect.");
  }

  req.session.user_id = foundUser.id;
  res.redirect("/urls");
});

app.post("/logout", (req, res) => {
  req.session = null;
  res.redirect("/login");
});

app.get("/register", (req, res) => {
  // Check for existing cookie (user logged in?)
  const u_id = req.session.user_id;
  if (u_id) {
    res.redirect("/urls");
  }
  // Render register page if user not logged in
  const templateVars = {
    user: users[req.session.user_id]
  };
  res.render("registration", templateVars);
});

app.post("/register", (req, res) => {
  const email = req.body.email;
  const password = req.body.password;
  const hashedPassword = bcrypt.hashSync(password, 10);

  if (email === '' || password === '') {
    return res.status(400).send("Please provide a username and password");
  }

  for (const u_id in users) {
    const user = users[u_id];
    if (user.email === email) {
      return res.status(400).send("Email already exists");
    }
  }

  const id = generateRandomString();
  const newUser = {
    id: id,
    email: email,
    password: hashedPassword
  };
  users[id] = newUser;
  req.session.user_id = id;

  console.log(users);
  res.redirect("/urls");
});

